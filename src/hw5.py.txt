# Sam DePoule
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import math


def main():
    state_data = load_in_data('food_access/washington.json',
                              'food_access/food_access.csv')
    print('state_data')
    print(state_data)
    # geopandas

    # print(percentage_food_data(state_data))
    # plot_map(state_data)
    # plot_population_map(state_data)
    # plot_population_county_map(state_data)
    # plot_food_access_by_county(state_data)
    # plot_low_access_tracts(state_data)


def load_in_data(census_file_name, food_access_file_name):
    """
    Loads data from a food access chart and a Washington map and merges them based on their CensusTracts
    """
    
    census = gpd.read_file(census_file_name)
    food_access = pd.read_csv(food_access_file_name)
    food_access['CensusTract'] = food_access['CensusTract'].astype(int)

    merged = census.merge(food_access,
                          left_on='CTIDFP00',
                          right_on='CensusTract',
                          how='left')

    return merged.loc[:, merged.columns != 'CTIDFP00']


def percentage_food_data(data):
    """
    Retuns the percentage of census data we have data for
    """
    
    return data['CensusTract'].notnull().mean() * 100


def plot_map(data):
    """
    Plots Washington map of counties
    """
    
    data.plot()
    plt.title('Washington State')
    plt.savefig('map.png')


def plot_population_map(data):
    """
    Plots census tract populations in Washington
    """

    fig, ax = plt.subplots(1)

    data.plot(ax=ax, color='#EEEEEE')
    data.plot(ax=ax, column='POP2010', legend=True)

    plt.title('Washington Census Tract Populations')
    plt.savefig('population_map.png')


def plot_population_county_map(data):
    """
    Plots populations by counties in WA
    """

    fig, ax = plt.subplots(1)
    data.plot(ax=ax, color='#EEEEEE')

    data = data.dissolve(by='County', aggfunc='sum')
    data.plot(ax=ax, column='POP2010', legend=True)

    plt.title('Washington County Populations')
    plt.savefig('county_population_map.png')


def plot_food_access_by_county(data):
    """
    Plots Low Access: Half, Low Access + Low income: Half, Low Access: 10, and Low Access + Low income: 10 by county in WA
    """

    data = data.loc[:, [
        'County', 'geometry', 'POP2010', 'lapophalf', 'lapop10', 'lalowihalf',
        'lalowi10'
    ]]

    fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(2, 2, figsize=(20, 10))

    data.plot(ax=ax1, vmin=0, vmax=1, color='#EEEEEE')
    data.plot(ax=ax2, vmin=0, vmax=1, color='#EEEEEE')
    data.plot(ax=ax3, vmin=0, vmax=1, color='#EEEEEE')
    data.plot(ax=ax4, vmin=0, vmax=1, color='#EEEEEE')

    data = data.dissolve(by='County', aggfunc='sum')

    changes = ['lapophalf', 'lapop10', 'lalowihalf', 'lalowi10']
    for change in changes:
        data[change + '_value'] = data[change] / data['POP2010']

    ax1.set_title('Low Access: Half')
    data.plot(ax=ax1, vmin=0, vmax=1, column='lapophalf_value', legend=True)

    ax2.set_title('Low Access + Low Income: Half')
    data.plot(ax=ax2, vmin=0, vmax=1, column='lalowihalf_value', legend=True)

    ax3.set_title('Low Access: 10')
    data.plot(ax=ax3, vmin=0, vmax=1, column='lapop10_value', legend=True)

    ax4.set_title('Low Access + Low Income: 10')
    data.plot(ax=ax4, vmin=0, vmax=1, column='lalowi10_value', legend=True)

    plt.savefig('county_food_access.png')


def plot_low_access_tracts(data):
    """
    Plots Low Access Census Tracts by county with a dark grey backgroudn for which counties we have data for, with a light grey background of the shape of WAa
    """

    data['LATracts'] = data.apply(lambda d: test_la_tracts(d, 1), axis=1)
    data['LATractsNot'] = data.apply(lambda d: test_la_tracts(d, 0), axis=1)

    fig, ax = plt.subplots(1)
    data.plot(ax=ax, color='#EEEEEE')
    data.plot(ax=ax,
              column='LATractsNot',
              cmap=colors.ListedColormap(['#AAAAAA'], [0.0, 1]))
    data.plot(ax=ax, column='LATracts')

    plt.title('Low Access Census Tracts')
    plt.savefig('low_access.png')


def test_la_tracts(data, vary):
    """
    Checks if urban is la or rural is la, returns NaN if neither
    """
    return True if (is_la(data, 'Urban', 'lapophalf', 'POP2010') or is_la(
        data, 'Rural', 'lapop10', 'POP2010')) == vary else float('NaN')


def is_la(data, a, b, c):
    """
    Checks if the low access falls within the requirements of 500 people or 33% of pop
    """
    if math.isnan(data[a]) or math.isnan(data[b]) or math.isnan(data[c]):
        return float('NaN')
    return int(data[a] and (data[b] >= 500 or data[b] / data[c] >= 0.33))


if __name__ == '__main__':
    main()
